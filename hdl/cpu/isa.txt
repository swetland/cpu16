
basic instruction set
---------------------
iiii iiii aaaa 0000    mov Ra, s8
iiii iiii aaaa 0001    mhi Ra, s8
ffff bbbb aaaa 0010    alu Ra, Ra, Rb
iiii ffff aaaa 0011    alu Ra, Ra, s4
ffff bbbb aaaa 01cc    alu Rc, Ra, Rb
iiii bbbb aaaa 1000    lw Ra, [Rb, si4]
iiii bbbb aaaa 1001    sw Ra, [Rb, si4]
iiii iiii aaaa 1010    bnz Ra, rel8
iiii iiii aaaa 1011    bz Ra, rel8
iiii iiii iiii 1100    b rel12
iiii iiii iiii 1101    bl rel12
0000 bbbb xxxx 1110    b Rb
0001 bbbb xxxx 1110    bl Rb
0010 xxxx xxxx 1110    nop

extended instruction set
------------------------
0011 xxxx xxxx 1110    iret
0100 nnnn aaaa 1110    mov Ra, Sn
0101 nnnn aaaa 1110    mov Sn, Ra
0110 aaaa bbbb 1110    mov Ra', Rb
0111 aaaa bbbb 1110    mov Ra, Rb'
1xxx xxxx xxxx 1110    undefined
nnnn nnnn 0000 1111    syscall n
nnnn nnnn 0001 1111    break;
nnnn nnnn 0010 1111    set <flags>
nnnn nnnn 0011 1111    clr <flags>
xxxx xxxx 0011 1111    undefined
xxxx xxxx 01xx 1111    undefined
xxxx xxxx 1xxx 1111    undefined

alu opcodes
-----------
0000 mov   r = b
0001 and   r = a & b
0010 orr   r = a | b
0011 xor   r = a ^ b
0100 add   r = a + b 
0101 sub   r = a - b
0110 mul   r = a * b
0111 mhi   r = (b << 8) | (a & 0xFF)
1000 slt   r = a < b
1001 sle   r = a <= b
1010 shr   r = a >> 1
1011 shl   r = a << 1
1100 bis   r = a | (1 << b[3:0])
1101 bic   r = a & (~(1 << b[3:0]))
1110 tbs   r = a & (1 << b[3:0])
1111 bit   r = 1 << b[3:0]

r0 - r12   general use
r13        stack (by convention only)
r14        link register (for BL ops)
r15        scratch (for assembler use)
s0 - s15   system registers
f0 - f7    system flags

