// autogenerated by crctool -poly=4c11db7 -crcsz=32 -dinsz=2 -reverse

module eth_crc32_2(
	input clk,
	input rst,
	input en,
	input [1:0]din,
	output [31:0]crc
	);

reg [31:0]c;
reg [31:0]n;

wire [1:0]d = {din[0],din[1]};

assign crc = {
	c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7]
	,c[8],c[9],c[10],c[11],c[12],c[13],c[14],c[15]
	,c[16],c[17],c[18],c[19],c[20],c[21],c[22],c[23]
	,c[24],c[25],c[26],c[27],c[28],c[29],c[30],c[31]
	};

always_comb begin
	n[0] = c[30]^d[0];
	n[1] = c[30]^c[31]^d[0]^d[1];
	n[2] = c[0]^c[30]^c[31]^d[0]^d[1];
	n[3] = c[1]^c[31]^d[1];
	n[4] = c[2]^c[30]^d[0];
	n[5] = c[3]^c[30]^c[31]^d[0]^d[1];
	n[6] = c[4]^c[31]^d[1];
	n[7] = c[5]^c[30]^d[0];
	n[8] = c[6]^c[30]^c[31]^d[0]^d[1];
	n[9] = c[7]^c[31]^d[1];
	n[10] = c[8]^c[30]^d[0];
	n[11] = c[9]^c[30]^c[31]^d[0]^d[1];
	n[12] = c[10]^c[30]^c[31]^d[0]^d[1];
	n[13] = c[11]^c[31]^d[1];
	n[14] = c[12];
	n[15] = c[13];
	n[16] = c[14]^c[30]^d[0];
	n[17] = c[15]^c[31]^d[1];
	n[18] = c[16];
	n[19] = c[17];
	n[20] = c[18];
	n[21] = c[19];
	n[22] = c[20]^c[30]^d[0];
	n[23] = c[21]^c[30]^c[31]^d[0]^d[1];
	n[24] = c[22]^c[31]^d[1];
	n[25] = c[23];
	n[26] = c[24]^c[30]^d[0];
	n[27] = c[25]^c[31]^d[1];
	n[28] = c[26];
	n[29] = c[27];
	n[30] = c[28];
	n[31] = c[29];
end

always_ff @(posedge clk) begin
	if (rst) begin
		c <= 32'hFFFFFFFF;
	end else if (en) begin
		c <= n;
	end
end

endmodule
